from fastapi import FastAPI
# from fastapi.middleware.cors import CORSMiddleware
from starlette.middleware import Middleware
from starlette.middleware.cors import CORSMiddleware

# middleware = [
#     Middleware(
#         CORSMiddleware,
#         allow_origins=['*'],
#         # allow_credentials=True,
#         # allow_methods=['*'],
#         # allow_headers=['*']
#     )
# ]

# app = FastAPI(middleware=middleware)
app = FastAPI()


@app.middleware("http")
async def add_cors_headers(request, call_next):
    response = await call_next(request)
    response.headers["Access-Control-Allow-Origin"] = "http://0.0.0.0:8000"
    response.headers["Access-Control-Allow-Credentials"] = "true"
    response.headers["Access-Control-Allow-Methods"] = "*"
    response.headers["Access-Control-Allow-Headers"] = "*"
    return response


app.add_middleware(
    CORSMiddleware,
    allow_origins=['*'],
    # allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
    expose_headers=["*"],
)


from model2000API import xgb_predictor
from email_location_126_onelabel_api_ready import cate_predictor
class_dict = {0:'non-maintenance',1:'maintenance'}
@app.post("/piatextclassfier")
async def read_item(piatext: str):
    # print (id)
    is_maintenance = class_dict[xgb_predictor([piatext]).item()]
    if is_maintenance=='maintenance':
        cates = cate_predictor(piatext)
        issues = []
        for i in range(len(cates)):
            row = cates[i]
            row = row.split('@')
            issues.append({'area':row[0],'location':row[1],'Msubtype':row[2],'Mmaintype':row[3], 'summary':'this part will be generated by LLM in the near future'})
        
        return {'is_maintenance': is_maintenance, 'issues':issues,'summary':'this part will be generated by LLM in the future'}
    elif is_maintenance=='non-maintenance':
        return {'is_maintenance': is_maintenance, 'issues':[],'summary':'this part will be generated by LLM in the future'}
    # return {"item_id": item_id}

    # return {'statusCode': 200,
    #     'headers': {
    #         'Access-Control-Allow-Headers': '*',
    #         'Access-Control-Allow-Origin': '*',
    #         'Access-Control-Allow-Methods': 'DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT'
    #     },'is_maintenance': is_maintenance, 'issues':[],'summary':'this part will be generated by LLM in the future'}
