import requests
import json
import pandas as pd
url = "http://54.253.228.31:8000/classfier"


###################################################################
# the input of the API is a string from the main content of an email
# the output of the API is a JSON file like the outputsample below
outputsample = {'is_maintenance': 'maintenance', 
                'issues': {'0': {'area': 'ceiling', 'location': 'kitchen', 'Msubtype': 'Switchboards', 'Mmaintype': 'Electrical'}, 
                           '1': {'area': 'ceiling', 'location': 'kitchen', 'Msubtype': 'Switchboards', 'Mmaintype': 'Electrical'}}, 
                'summary': 'this part will be generated by LLM in the future'}
# note the output consists of three keys: 1. 'is_maintenance' which classify email as maintenance or non-maintenance,
# 2. 'issues' which is a dictionary where the keys are 0, 1, ..., N,  which represent multiple issues for an email. The value of each key like 0 describes an issue like {'area': 'ceiling', 'location': 'kitchen', 'Msubtype': 'Switchboards', 'Mmaintype': 'Electrical'} where the 'location' describe which area or room has issue; the 'area' indicates which part of that area has issue; the 'Mmaintype' is the main type of maintenance and the 'Msubtype' is the sub-type of the maintenance. If the 'is_maintenance'==non_maintenance, the issues will be an empty {}.
# 3. 'summary' will give an summary for that input email generated by large language model in the near future.


###################################################################
# below is an example of the input and output.
print ('~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~')
print ('~~~~~~~~~~~~below is an example of the input and output.~~~~~~~~~~~~~~~~~~~')
df=pd.read_csv('126_cate_data.csv')
params = {"email": df.iloc[19]['Body']}
response = requests.post(url, params=params)
res = json.loads(response.text)
print('$$$$$$$$',res)


####################################################################
# below will print more examples
print ('~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~')
print ('~~~~~~~~~~~~elow will print more examples~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~')
for i, email in enumerate(df['Body'].values):
    if i<20:
        params = {"email": email}
        response = requests.post(url, params=params)
        res = json.loads(response.text)
        print('######',res)


###################################################################
# below will check the performance of the binary classification model 
print ('~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~')
print ('~~~~~~below will check the performance of the binary classification ~~~~~~~')
emails = pd.read_csv('test.csv')
for i, email in enumerate(emails['text'].values):
    if i<10:
        params = {"email": email}
        response = requests.post(url, params=params)
        res = json.loads(response.text)
        print('@@@@@@@','ground truth:', emails['label'][i], res['is_maintenance'])
